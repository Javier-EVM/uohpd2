import tensorflow as tf
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import accuracy_score
from dataset import loadData
import numpy as np

x,y = loadData('house-votes-84')
#x,y = loadData('spambase')


n_entrada= x.shape[1]

print(n_entrada)

# Se divide el conjunto de entrenamiento en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

#Se normalizan las caracteristicas
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


#Se crea el modelo de red neuronal
model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(n_entrada,)),  
    tf.keras.layers.Dense(2*n_entrada, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')  
])
#Se compila el modelo
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])


#Entrenamiento
e = 50
model.fit(X_train, y_train, epochs=e)


y_pred = (model.predict(X_test) > 0.5).astype(int).flatten()
accuracy = accuracy_score(y_test, y_pred)
print(f"Puntuaci√≥n de Acuracy {accuracy: .2f}")